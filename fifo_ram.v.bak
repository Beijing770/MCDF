
module ram (
	clk,
	rd_en,
	wr_en,
	wr_addr,    //write pointer
	rd_addr,    //read  pointer
	data_in,
	data_out
);
    
    parameter FIFO_DEPTH = 4'b1000;    //depth is 8
    parameter FIFO_WIDE = 5'b10_0000;    //data wide is 32
    parameter PTR_WIDE = 1'd3;
    
    input clk;    
    input rd_en;
    input wr_en;    
    input [PTR_WIDE-1:0] wr_addr;    
    input [PTR_WIDE-1:0] rd_addr;    
    input [FIFO_WIDE-1:0] data_in;
    output [FIFO_WIDE-1:0] data_out;
    
    reg [FIFO_WIDE-1 : 0] data_out;    
    reg [FIFO_WIDE-1 : 0] fifo_ram [FIFO_DEPTH-1:0];    //defin fifo_ram 32*8

    always @(posedge clk) begin    //read prosess
    	if (rd_en) begin
    	    data_out <= fifo_ram[rd_addr];
    	end
    end
    
    always @(posedge clk) begin    //write prosess
    	if (wr_en) begin
    	    fifo_ram[wr_addr] <= data_in;    		
    	end	
    end

endmodule